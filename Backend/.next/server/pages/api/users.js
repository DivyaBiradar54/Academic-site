"use strict";(()=>{var e={};e.id=829,e.ids=[829],e.modules={3524:e=>{e.exports=require("@prisma/client")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},5675:(e,r,t)=>{t.r(r),t.d(r,{config:()=>l,default:()=>d,routeModule:()=>c});var s={};t.r(s),t.d(s,{default:()=>handler});var a=t(1802),n=t(7153),i=t(6249),u=t(3524);let o=new u.PrismaClient;async function handler(e,r){try{if("GET"===e.method){let{id:t}=e.query;if(t){let e=await o.user.findUnique({where:{id:parseInt(t)},select:{email:!0,name:!0}});if(!e)return r.status(404).json({message:"User not found."});return r.status(200).json(e)}let s=await o.user.findMany({include:{Profiles:!0,Events:!0,Jobs:!0}});return r.status(200).json(s)}if("POST"!==e.method)return r.setHeader("Allow",["GET","POST"]),r.status(405).end(`Method ${e.method} Not Allowed`);{let{userType:t,name:s,email:a,passwordHash:n}=e.body;if(!t||!s||!a||!n)return r.status(400).json({message:"All fields are required."});let i=await o.user.create({data:{userType:t,name:s,email:a,password:n}});return r.status(201).json(i)}}catch(e){return console.error("Error in users API:",e),r.status(500).json({error:e.message})}finally{await o.$disconnect()}}let d=(0,i.l)(s,"default"),l=(0,i.l)(s,"config"),c=new a.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/users",pathname:"/api/users",bundlePath:"",filename:""},userland:s})}};var r=require("../../webpack-api-runtime.js");r.C(e);var __webpack_exec__=e=>r(r.s=e),t=r.X(0,[222],()=>__webpack_exec__(5675));module.exports=t})();