"use strict";(()=>{var e={};e.id=204,e.ids=[204],e.modules={3524:e=>{e.exports=require("@prisma/client")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},8837:(e,t,a)=>{a.r(t),a.d(t,{config:()=>u,default:()=>l,routeModule:()=>p});var n={};a.r(n),a.d(n,{default:()=>handler});var r=a(1802),i=a(7153),s=a(6249),o=a(3524);let d=new o.PrismaClient;async function handler(e,t){let{id:a}=e.query;if("GET"===e.method)try{let e=await d.event.findUnique({where:{id:parseInt(a)},include:{organizer:{select:{name:!0}}}});if(!e)return t.status(404).json({message:"Event not found"});t.status(200).json({id:e.id,name:e.name,description:e.description,eventDate:e.eventDate,location:e.location,participationType:e.participationType,organizerName:e.organizer.name})}catch(e){console.error("Error fetching event:",e),t.status(500).json({message:"Internal server error"})}else t.setHeader("Allow",["GET"]),t.status(405).json({message:`Method ${e.method} not allowed`})}let l=(0,s.l)(n,"default"),u=(0,s.l)(n,"config"),p=new r.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/events/[id]",pathname:"/api/events/[id]",bundlePath:"",filename:""},userland:n})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),a=t.X(0,[222],()=>__webpack_exec__(8837));module.exports=a})();