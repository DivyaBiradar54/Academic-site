"use strict";(()=>{var e={};e.id=1,e.ids=[1],e.modules={3524:e=>{e.exports=require("@prisma/client")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6508:(e,r,a)=>{a.r(r),a.d(r,{config:()=>p,default:()=>u,routeModule:()=>w});var s={};a.r(s),a.d(s,{default:()=>handler});var t=a(1802),i=a(7153),d=a(6249),n=a(3524),o=a(5668);let l=new n.PrismaClient;async function handler(e,r){if(await (0,o.Z)(e,r),"POST"===e.method){let{username:a,password:s}=e.body;try{if(!a||!s)return r.status(400).json({message:"Username and password are required."});let e=await l.user.findFirst({where:{name:a}});if(!e)return r.status(404).json({message:"User not found."});await l.user.update({where:{id:e.id},data:{password:s}}),await l.profile.updateMany({where:{userId:e.id},data:{password:s}}),await l.registration.updateMany({where:{username:a},data:{password:s}}),r.status(200).json({message:"Password updated successfully in User, Profile, and Registration tables."})}catch(e){console.error("Error resetting password:",e),r.status(500).json({message:"Internal server error."})}}else r.setHeader("Allow",["POST"]),r.status(405).end(`Method ${e.method} Not Allowed`)}let u=(0,d.l)(s,"default"),p=(0,d.l)(s,"config"),w=new t.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/reset-password",pathname:"/api/reset-password",bundlePath:"",filename:""},userland:s})},5668:(e,r,a)=>{a.d(r,{Z:()=>corsMiddleware});let s=require("cors");var t=a.n(s);let i=t()({origin:"*",methods:["GET","POST","PUT","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization"]});async function corsMiddleware(e,r){await new Promise((a,s)=>{i(e,r,e=>e instanceof Error?s(e):a(e))})}}};var r=require("../../webpack-api-runtime.js");r.C(e);var __webpack_exec__=e=>r(r.s=e),a=r.X(0,[222],()=>__webpack_exec__(6508));module.exports=a})();